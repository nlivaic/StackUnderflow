✘ Question.Create use case: service accepts a model Dto, but first has to create proper Tag objects based on input Tag Ids. This requires me to design repositories so we know how to fetch data. @cancelled (07. 06. 2020. 01:20:26)
  Check eShopOnWeb (Specification pattern).
  ✘ It's all bullshit. Discard repositories and work with DbContext directly. @cancelled (07. 06. 2020. 01:20:25)
✘ Move Specification's queries into standalone query object. Research this further. @cancelled (07. 06. 2020. 01:20:23)
✘ Which layer does StackUnderflowDbContext and Queries go to? @cancelled (07. 06. 2020. 01:20:21)
✔ Voting: @done (07. 06. 2020. 01:20:34)
  ✔ Domain @done (05. 06. 2020. 23:14:17)
  ✔ Service @done (05. 06. 2020. 23:14:22)
  ✔ Druge klase (q/a/c), da li zbrajaju bodove koristeći IVotable? @done (05. 06. 2020. 23:19:56)
☐ User
  ✔ Rename OwnerId to UserId @done (25. 06. 2020. 17:15:24)
  ✔ Add User property to q/a/c @done (25. 06. 2020. 17:18:16)
  ✔ Find all "@nl" regarding "owner" @done (25. 06. 2020. 17:23:57)
  ✔ Do existing unit tests work out ok? @done (25. 06. 2020. 17:23:58)
  ☐ Unit tests
  ☐ Add to DbContext
  ☐ Add to Seeder
☐ Razraditi unit testove.
  ✔ Question @done (08. 06. 2020. 23:54:16)
  ✔ Answer @done (17. 06. 2020. 18:55:09)
  ✔ Comment @done (17. 06. 2020. 18:55:06)
    ✔ Search for all "NotImplementedException". @done (17. 06. 2020. 18:54:15)
    ✔ Edit WithinDeadline. @done (17. 06. 2020. 18:54:17)
    ✔ Edit with invalid data. @done (17. 06. 2020. 18:55:02)
  ✔ QuestionTests - CannotAcceptMoreThanOneAnswer @done (17. 06. 2020. 21:59:17)
  ✔ CommentTests - Comment_CreatingWithoutVoteable_Fails @done (17. 06. 2020. 19:06:24)
  ✔ IVoteable - dodati za q/a/c posebno. @done (17. 06. 2020. 23:22:44)
✔ Maknuti sve vezano za komentare u ICommentable. @done (17. 06. 2020. 23:22:48)
☐ Razraditi basic Web API
  ☐ Create in-memory database with a basic seeder
    ☐ Tokom seedanja kaže da već postoji Tag sa tim i tim Id. Da nije možda da se na neku foru stvaraju nove instance Tagova, sa istim ID-jem?
  ☐ Startup.cs
    ☐ Routes and endpoints
    ☐ services.AddController()
    ☐ app.UseDeveloperExceptionPage()
    ☐ app.ExceptionHandler()
    ☐ InvalidModelStateResponseFactory
  ☐ Controllers
    ☐ QuestionsController
      ✔ [ApiController] @done (18. 06. 2020. 22:12:14)
      ☐ Get, Post, Put, Delete
      ☐ Request and Response Models
      ☐ Automapper
      ☐ FluentValidation
    ☐ AnswersController
    ☐ CommentsController
    ☐ VotesController
    ☐ inherit from ControllerBase
    ☐ action method type ActionResult<T>
    ☐ return Ok()
  ☐ Filtering and searching
  ☐ Cacheing
  ☐ Swagger
  ☐ Logging
  ☐ Review RESTful project for clues
  ☐ Security
☐ Razraditi bazu
  ☐ dotnet remove package Microsoft.EntityFrameworkCore.InMemory
☐ Razraditi jobove
☐ Razraditi evente i event handling
✔ Bacam puno ArgumentExceptiona. Neki od njih (npr. VoteRepository) su ustvari tehničke prirode, a neki (npr. po domeni) su biznis errori. @done (08. 06. 2020. 23:54:23)
✔ Obrnuo sam odnose odnose. Povukao sam (Vote + Q), iz čega proizlazi da ako ne postoji ta kombinacija da nikad nije taj owner dao vote tom questionu, a rezultat toga je da sam dobio null i nemam s čime više raditi. Mislim da je esencija problema loše složen repozitorij. Trebam to bolje napraviti: esencijalno trebam dobiti (q/a/c + 0..1 vote), to je dovoljno da mogu provesti business rule. Drugi pristup je da vote gledam potpuno zasebno, ali to trebam dodatno promisliti (eventi, računanje VotingSum, računanje bodova). @done (07. 06. 2020. 01:20:03)